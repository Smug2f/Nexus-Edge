package com.gamesense.client.module.modules.exploits;

/*
    Credits to seppuku
    https://github.com/seppukudevelopment/seppuku/blob/master/src/main/java/me/rigamortis/seppuku/impl/module/render/NewChunksModule.java
 */

import com.gamesense.api.event.events.PacketEvent;
import com.gamesense.api.event.events.RenderEvent;
import com.gamesense.api.setting.values.*;
import com.gamesense.api.util.render.GSColor;
import com.gamesense.api.util.render.RenderUtil;
import com.gamesense.api.util.world.GeometryMasks;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.util.math.AxisAlignedBB;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Module.Declaration(name = "NewChunks",category = Category.Exploits)
public class NewChunks extends Module {

    ModeSetting mode = registerMode("Mode", Arrays.asList("Fill", "Outline", "Both"), "Box");
    ColorSetting colorFill = registerColor("Color Fill", new GSColor(255, 255, 255, 255), () -> !mode.getValue().equals("Outline"), true);
    ColorSetting colorOutline = registerColor("Color Outline", new GSColor(0, 0, 0, 255), () -> !mode.getValue().equals("Fill"), true);
    IntegerSetting lineWidth = registerInteger("Line Width", 1, 1, 5);
    DoubleSetting heigth = registerDouble("Height", 1, 0, 10);

    private final List<ChunkData> chunkDataList = new ArrayList<>();

    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener = new Listener<>(event -> {
        if (event.getPacket() instanceof SPacketChunkData) {
            final SPacketChunkData packet = (SPacketChunkData) event.getPacket();
            if (!packet.isFullChunk()) {
                final ChunkData chunk = new ChunkData(packet.getChunkX() * 16, packet.getChunkZ() * 16);

                if (!this.contains(chunk)) {
                    this.chunkDataList.add(chunk);
                }
            }
        }

    });

    @Override
    public void onWorldRender(RenderEvent event) {
        if (mc.getRenderViewEntity() == null)
            return;

        for (int i = this.chunkDataList.size() - 1; i >= 0; i--) {
            final ChunkData chunkData = this.chunkDataList.get(i);
            if (chunkData != null) {

                final AxisAlignedBB bb = new AxisAlignedBB(chunkData.x, 0, chunkData.z, chunkData.x + 16, heigth.getValue(), chunkData.z + 16);


                    switch (this.mode.getValue()) {
                        case "Box":
                            RenderUtil.drawBox(bb, true, 1, colorFill.getValue(), colorFill.getValue().getAlpha(), GeometryMasks.Quad.ALL);
                            break;
                        case "Outline":
                            RenderUtil.drawBoundingBox(bb, lineWidth.getValue(), colorOutline.getValue(), colorOutline.getValue().getAlpha());
                            break;
                        case "Both":
                            RenderUtil.drawBox(bb, true, 1, colorFill.getValue(), colorFill.getValue().getAlpha(), GeometryMasks.Quad.ALL);
                            RenderUtil.drawBoundingBox(bb, lineWidth.getValue(), colorOutline.getValue(), colorOutline.getValue().getAlpha());
                            break;
                    }
            }
        }
    }

    private boolean contains(final ChunkData chunkData) {
        boolean temp = false;
        for (ChunkData data : this.chunkDataList) {
            if (data.x == chunkData.x && data.z == chunkData.z) {
                temp = true;
                break;
            }
        }
        return temp;
    }
    public static class ChunkData {
        private int x;
        private int z;

        public ChunkData(int x, int z) {
            this.x = x;
            this.z = z;
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getZ() {
            return z;
        }

        public void setZ(int z) {
            this.z = z;
        }
    }

}
